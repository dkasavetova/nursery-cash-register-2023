// Google Sheets Configuration
const SHEET_CONFIG = {
    // –ó–∞–º–µ–Ω–µ—Ç–µ —Å –≤–∞—à–∏—è Google Sheets API key
    API_KEY: 'YOUR_GOOGLE_SHEETS_API_KEY',
    // ID –Ω–∞ –≤–∞—à–∏—è Google Sheets –¥–æ–∫—É–º–µ–Ω—Ç
    SHEET_ID: '1n2WYI0WVIS3kGdn40IKlfa_frQx_95-RIyta2QyPFXM',
    // GID –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—è –ª–∏—Å—Ç
    GID: '1782469559',
    // –ò–º–µ—Ç–æ –Ω–∞ –ª–∏—Å—Ç–∞ –≤ Google Sheets
    RANGE: 'Sheet1!A:D' // –ö–æ–ª–æ–Ω–∏: –î–∞—Ç–∞, –û–ø–∏—Å–∞–Ω–∏–µ, –¢–∏–ø, –°—É–º–∞
};

class NurseryCashRegister {
    constructor() {
        this.transactions = [];
        this.summary = {
            totalIncome: 0,
            totalExpenses: 0,
            balance: 0
        };
        
        this.initializeApp();
    }

    initializeApp() {
        this.setupEventListeners();
        this.populateMonthFilter();
        this.loadTransactions();
    }

    setupEventListeners() {
        const refreshBtn = document.getElementById('refresh-btn');
        const incomeBtn = document.getElementById('income-btn');
        const expenseBtn = document.getElementById('expense-btn');
        const monthFilter = document.getElementById('month-filter');

        refreshBtn.addEventListener('click', () => this.loadTransactions());
        incomeBtn.addEventListener('click', () => this.showIncomeOnly());
        expenseBtn.addEventListener('click', () => this.showExpensesOnly());
        monthFilter.addEventListener('change', () => this.filterTransactions());
    }

    populateMonthFilter() {
        const monthFilter = document.getElementById('month-filter');
        const months = [
            '–Ø–Ω—É–∞—Ä–∏', '–§–µ–≤—Ä—É–∞—Ä–∏', '–ú–∞—Ä—Ç', '–ê–ø—Ä–∏–ª', '–ú–∞–π', '–Æ–Ω–∏',
            '–Æ–ª–∏', '–ê–≤–≥—É—Å—Ç', '–°–µ–ø—Ç–µ–º–≤—Ä–∏', '–û–∫—Ç–æ–º–≤—Ä–∏', '–ù–æ–µ–º–≤—Ä–∏', '–î–µ–∫–µ–º–≤—Ä–∏'
        ];

        months.forEach((month, index) => {
            const option = document.createElement('option');
            option.value = index + 1;
            option.textContent = month;
            monthFilter.appendChild(option);
        });
    }

    async loadTransactions() {
        this.showLoading(true);
        
        try {
            // –û–ø–∏—Ç–≤–∞–º–µ –ø—ä—Ä–≤–æ –¥–∞ –∑–∞—Ä–µ–¥–∏–º –æ—Ç Google Sheets –∫–∞—Ç–æ CSV —Å –ø—Ä–∞–≤–∏–ª–Ω–∏—è GID
            const csvUrl = `https://docs.google.com/spreadsheets/d/${SHEET_CONFIG.SHEET_ID}/export?format=csv&gid=${SHEET_CONFIG.GID}`;
            
            try {
                const response = await fetch(csvUrl);
                
                if (response.ok) {
                    const csvText = await response.text();
                    this.processCSVData(csvText);
                    return;
                }
            } catch (csvError) {
                console.log('CSV –º–µ—Ç–æ–¥ –Ω–µ—É—Å–ø–µ—à–µ–Ω, –æ–ø–∏—Ç–≤–∞–º–µ —Å API...');
            }

            // –ê–∫–æ CSV –Ω–µ —Ä–∞–±–æ—Ç–∏, –æ–ø–∏—Ç–≤–∞–º–µ —Å API
            if (SHEET_CONFIG.API_KEY !== 'YOUR_GOOGLE_SHEETS_API_KEY') {
                const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_CONFIG.SHEET_ID}/values/${SHEET_CONFIG.RANGE}?key=${SHEET_CONFIG.API_KEY}`;
                const response = await fetch(url);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                this.processSheetData(data.values);
                return;
            }

            // –ê–∫–æ –Ω–∏—Ç–æ –µ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∏, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –¥–µ–º–æ –¥–∞–Ω–Ω–∏
            throw new Error('–ù—è–º–∞ –¥–æ—Å—Ç—ä–ø –¥–æ Google Sheets');
            
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ:', error);
            this.showError('–ù–µ –º–æ–∂–∞—Ö –¥–∞ –∑–∞—Ä–µ–¥—è –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç Google Sheets. –ú–æ–ª—è, —É–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ –¥–æ–∫—É–º–µ–Ω—Ç—ä—Ç –µ –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—ä–ø–µ–Ω. –ò–∑–ø–æ–ª–∑–≤–∞—Ç —Å–µ –¥–µ–º–æ –¥–∞–Ω–Ω–∏.');
            this.loadDemoData();
        } finally {
            this.showLoading(false);
        }
    }

    processCSVData(csvText) {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏ CSV –¥–∞–Ω–Ω–∏:', csvText.substring(0, 500) + '...');
        
        const lines = csvText.split('\n').filter(line => line.trim());
        
        if (lines.length <= 1) {
            this.showError('–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏ –≤ CSV.');
            return;
        }

        console.log(`–ù–∞–º–µ—Ä–µ–Ω–∏ ${lines.length} —Ä–µ–¥–∞ –≤ CSV`);
        console.log('–ü—ä—Ä–≤–∏ —Ä–µ–¥ (–∑–∞–≥–ª–∞–≤–∏—è):', lines[0]);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–º–µ –∑–∞–≥–ª–∞–≤–Ω–∏—è —Ä–µ–¥
        const dataRows = lines.slice(1).map(line => {
            // –ü–æ-–¥–æ–±—ä—Ä CSV parser –∫–æ–π—Ç–æ —Å–µ —Å–ø—Ä–∞–≤—è —Å –∑–∞–ø–µ—Ç–∞–∏ –≤ –∫–∞–≤–∏—á–∫–∏
            const fields = this.parseCSVLine(line);
            return fields;
        });

        console.log('–ü—Ä–∏–º–µ—Ä –æ—Ç –¥–∞–Ω–Ω–∏:', dataRows.slice(0, 3));

        this.transactions = dataRows.map((row, index) => ({
            id: index + 1,
            date: this.parseDate(row[0] || ''),
            description: row[1] || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–µ',
            type: row[2] || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
            amount: this.parseAmount(row[3] || '0')
        })).filter(transaction => {
            const valid = transaction.date && !isNaN(transaction.amount) && transaction.amount !== 0;
            if (!valid) {
                console.log('–ù–µ–≤–∞–ª–∏–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', transaction);
            }
            return valid;
        });

        console.log(`–û–±—Ä–∞–±–æ—Ç–µ–Ω–∏ ${this.transactions.length} –≤–∞–ª–∏–¥–Ω–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);

        this.calculateSummary();
        this.displayTransactions();
        this.updateSummaryDisplay();
        
        // –î–æ–±–∞–≤—è–º–µ –≤–∏–∑—É–∞–ª–Ω–∞ –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∑–∞ –≤—Å–∏—á–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const statusDiv = document.getElementById('connection-status');
        if (statusDiv) {
            statusDiv.innerHTML = '<span style="color: blue;">üìä –ü–æ–∫–∞–∑–∞–Ω–∏ —Å–∞ –≤—Å–∏—á–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</span>';
        }
    }

    parseCSVLine(line) {
        const result = [];
        let current = '';
        let inQuotes = false;
        
        for (let i = 0; i < line.length; i++) {
            const char = line[i];
            
            if (char === '"') {
                inQuotes = !inQuotes;
            } else if (char === ',' && !inQuotes) {
                result.push(current.trim());
                current = '';
            } else {
                current += char;
            }
        }
        
        result.push(current.trim());
        return result;
    }

    processSheetData(rows) {
        if (!rows || rows.length <= 1) {
            this.showError('–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏.');
            return;
        }

        // –ü—Ä–æ–ø—É—Å–∫–∞–º–µ –∑–∞–≥–ª–∞–≤–Ω–∏—è —Ä–µ–¥
        const dataRows = rows.slice(1);
        
        this.transactions = dataRows.map((row, index) => ({
            id: index + 1,
            date: this.parseDate(row[0] || ''),
            description: row[1] || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–µ',
            type: row[2] || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
            amount: this.parseAmount(row[3] || '0')
        })).filter(transaction => transaction.date && !isNaN(transaction.amount) && transaction.amount !== 0);

        this.calculateSummary();
        this.displayTransactions();
        this.updateSummaryDisplay();
        
        // –î–æ–±–∞–≤—è–º–µ –≤–∏–∑—É–∞–ª–Ω–∞ –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∑–∞ –≤—Å–∏—á–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const statusDiv = document.getElementById('connection-status');
        if (statusDiv) {
            statusDiv.innerHTML = '<span style="color: blue;">üìä –ü–æ–∫–∞–∑–∞–Ω–∏ —Å–∞ –≤—Å–∏—á–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</span>';
        }
    }

    loadDemoData() {
        // –î–µ–º–æ –¥–∞–Ω–Ω–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ
        this.transactions = [
            { id: 1, date: new Date('2024-10-01'), description: '–¢–∞–∫—Å–∞ –∑–∞ —Ö—Ä–∞–Ω–∞ - –æ–∫—Ç–æ–º–≤—Ä–∏', type: '–ü—Ä–∏—Ö–æ–¥', amount: 250.00 },
            { id: 2, date: new Date('2024-10-02'), description: '–ü–æ–∫—É–ø–∫–∞ –Ω–∞ –∏–≥—Ä–∞—á–∫–∏', type: '–†–∞–∑—Ö–æ–¥', amount: -45.50 },
            { id: 3, date: new Date('2024-10-03'), description: '–î–∞—Ä–µ–Ω–∏–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–∏', type: '–ü—Ä–∏—Ö–æ–¥', amount: 100.00 },
            { id: 4, date: new Date('2024-10-05'), description: '–ü–æ—á–∏—Å—Ç–≤–∞—â–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏', type: '–†–∞–∑—Ö–æ–¥', amount: -25.80 },
            { id: 5, date: new Date('2024-10-08'), description: '–¢–∞–∫—Å–∞ –∑–∞ –¥–µ–π–Ω–æ—Å—Ç–∏', type: '–ü—Ä–∏—Ö–æ–¥', amount: 150.00 },
            { id: 6, date: new Date('2024-10-10'), description: '–ú–∞—Ç–µ—Ä–∏–∞–ª–∏ –∑–∞ —Ä–∏—Å—É–≤–∞–Ω–µ', type: '–†–∞–∑—Ö–æ–¥', amount: -30.20 },
            { id: 7, date: new Date('2024-10-12'), description: '–î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ —Ç–∞–∫—Å–∞', type: '–ü—Ä–∏—Ö–æ–¥', amount: 75.00 },
            { id: 8, date: new Date('2024-10-15'), description: '–•—Ä–∞–Ω–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏', type: '–†–∞–∑—Ö–æ–¥', amount: -85.60 },
            { id: 9, date: new Date('2024-10-18'), description: '–°—ä–±–∏—Ç–∏–µ –≤ –≥—Ä–∞–¥–∏–Ω–∞—Ç–∞', type: '–ü—Ä–∏—Ö–æ–¥', amount: 200.00 },
            { id: 10, date: new Date('2024-10-20'), description: '–†–µ–º–æ–Ω—Ç –Ω–∞ –æ–±–æ—Ä—É–¥–≤–∞–Ω–µ', type: '–†–∞–∑—Ö–æ–¥', amount: -120.00 }
        ];

        this.calculateSummary();
        this.displayTransactions();
        this.updateSummaryDisplay();
        
        // –î–æ–±–∞–≤—è–º–µ –≤–∏–∑—É–∞–ª–Ω–∞ –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∑–∞ –≤—Å–∏—á–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const statusDiv = document.getElementById('connection-status');
        if (statusDiv) {
            statusDiv.innerHTML = '<span style="color: blue;">üìä –ü–æ–∫–∞–∑–∞–Ω–∏ —Å–∞ –≤—Å–∏—á–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</span>';
        }
    }

    parseDate(dateString) {
        if (!dateString) return null;
        
        // –û–ø–∏—Ç–≤–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏ –Ω–∞ –¥–∞—Ç–∞
        const formats = [
            /^\d{4}-\d{2}-\d{2}$/, // YYYY-MM-DD
            /^\d{2}\/\d{2}\/\d{4}$/, // DD/MM/YYYY
            /^\d{2}\.\d{2}\.\d{4}$/ // DD.MM.YYYY
        ];

        for (const format of formats) {
            if (format.test(dateString)) {
                return new Date(dateString);
            }
        }

        return new Date(dateString);
    }

    parseAmount(amountString) {
        if (typeof amountString === 'number') return amountString;
        if (!amountString || amountString.toString().trim() === '') return 0;
        
        // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å–∏–º–≤–æ–ª–∏ –æ—Å–≤–µ–Ω —Ü–∏—Ñ—Ä–∏, —Ç–æ—á–∫–∞, –∑–∞–ø–µ—Ç–∞—è –∏ –º–∏–Ω—É—Å
        let cleanAmount = amountString.toString().trim()
            .replace(/[^\d.,-]/g, '') // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å–∏–º–≤–æ–ª–∏ –æ—Å–≤–µ–Ω —Ü–∏—Ñ—Ä–∏ –∏ . , -
            .replace(/,/g, '.'); // –ó–∞–º–µ–Ω—è–º–µ –∑–∞–ø–µ—Ç–∞–∏ —Å —Ç–æ—á–∫–∏
            
        // –ê–∫–æ –∑–∞–ø–æ—á–≤–∞ —Å –º–∏–Ω—É—Å, –∑–∞–ø–∞–∑–≤–∞–º–µ –≥–æ
        const isNegative = cleanAmount.startsWith('-');
        cleanAmount = cleanAmount.replace('-', '');
        
        const amount = parseFloat(cleanAmount) || 0;
        return isNegative ? -amount : amount;
    }

    calculateSummary() {
        this.summary = {
            totalIncome: 0,
            totalExpenses: 0,
            balance: 0
        };

        this.transactions.forEach(transaction => {
            if (transaction.amount > 0) {
                this.summary.totalIncome += transaction.amount;
            } else {
                this.summary.totalExpenses += Math.abs(transaction.amount);
            }
        });

        this.summary.balance = this.summary.totalIncome - this.summary.totalExpenses;
    }

    updateSummaryDisplay() {
        document.getElementById('total-income').textContent = this.formatCurrency(this.summary.totalIncome);
        document.getElementById('total-expenses').textContent = this.formatCurrency(this.summary.totalExpenses);
        document.getElementById('balance').textContent = this.formatCurrency(this.summary.balance);
    }

    displayTransactions() {
        const tbody = document.getElementById('transactions-body');
        tbody.innerHTML = '';

        if (this.transactions.length === 0) {
            const row = tbody.insertRow();
            const cell = row.insertCell(0);
            cell.colSpan = 4;
            cell.textContent = '–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏';
            cell.style.textAlign = 'center';
            cell.style.padding = '2rem';
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä–∞–º–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏—Ç–µ –ø–æ –¥–∞—Ç–∞ (–Ω–∞–π-–Ω–æ–≤–∏—Ç–µ –ø—ä—Ä–≤–æ)
        const sortedTransactions = [...this.transactions].sort((a, b) => new Date(b.date) - new Date(a.date));

        sortedTransactions.forEach(transaction => {
            const row = tbody.insertRow();
            
            // –î–∞—Ç–∞
            const dateCell = row.insertCell(0);
            dateCell.textContent = this.formatDate(transaction.date);
            
            // –û–ø–∏—Å–∞–Ω–∏–µ
            const descCell = row.insertCell(1);
            descCell.textContent = transaction.description;
            
            // –¢–∏–ø
            const typeCell = row.insertCell(2);
            typeCell.textContent = transaction.type;
            
            // –°—É–º–∞
            const amountCell = row.insertCell(3);
            amountCell.textContent = this.formatCurrency(Math.abs(transaction.amount));
            amountCell.className = transaction.amount > 0 ? 'transaction-income' : 'transaction-expense';
        });

        document.getElementById('transactions-table').classList.remove('hidden');
    }

    showIncomeOnly() {
        // –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ —Å–∞–º–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ
        const incomeTransactions = this.transactions.filter(transaction => 
            transaction.amount > 0 || 
            transaction.type.toLowerCase().includes('–ø—Ä–∏—Ö–æ–¥')
        );

        // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø–∞–∑–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const originalTransactions = [...this.transactions];
        
        // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –Ω–æ –∑–∞–ø–∞–∑–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const tempTransactions = [...this.transactions];
        this.transactions = incomeTransactions;
        this.displayTransactions();
        this.transactions = tempTransactions;

        // –î–æ–±–∞–≤—è–º–µ –≤–∏–∑—É–∞–ª–Ω–∞ –∏–Ω–¥–∏–∫–∞—Ü–∏—è
        const statusDiv = document.getElementById('connection-status');
        if (statusDiv) {
            statusDiv.innerHTML = '<span style="color: green;">üìà –ü–æ–∫–∞–∑–∞–Ω–∏ —Å–∞ —Å–∞–º–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ</span>';
        }
    }

    showExpensesOnly() {
        // –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ —Å–∞–º–æ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ
        const expenseTransactions = this.transactions.filter(transaction => 
            transaction.amount < 0 || 
            transaction.type.toLowerCase().includes('—Ä–∞–∑—Ö–æ–¥')
        );

        // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø–∞–∑–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const originalTransactions = [...this.transactions];
        
        // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –Ω–æ –∑–∞–ø–∞–∑–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const tempTransactions = [...this.transactions];
        this.transactions = expenseTransactions;
        this.displayTransactions();
        this.transactions = tempTransactions;

        // –î–æ–±–∞–≤—è–º–µ –≤–∏–∑—É–∞–ª–Ω–∞ –∏–Ω–¥–∏–∫–∞—Ü–∏—è
        const statusDiv = document.getElementById('connection-status');
        if (statusDiv) {
            statusDiv.innerHTML = '<span style="color: red;">üìâ –ü–æ–∫–∞–∑–∞–Ω–∏ —Å–∞ —Å–∞–º–æ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ</span>';
        }
    }

    filterTransactions() {
        const monthFilter = document.getElementById('month-filter');
        const selectedMonth = monthFilter.value;

        if (!selectedMonth) {
            this.displayTransactions();
            return;
        }

        const filteredTransactions = this.transactions.filter(transaction => {
            return new Date(transaction.date).getMonth() + 1 === parseInt(selectedMonth);
        });

        // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø–∞–∑–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const originalTransactions = [...this.transactions];
        this.transactions = filteredTransactions;
        
        this.calculateSummary();
        this.displayTransactions();
        this.updateSummaryDisplay();
        
        // –í—Ä—ä—â–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        this.transactions = originalTransactions;
    }

    formatDate(date) {
        if (!(date instanceof Date)) {
            date = new Date(date);
        }
        
        return date.toLocaleDateString('bg-BG', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
        });
    }

    formatCurrency(amount) {
        return new Intl.NumberFormat('bg-BG', {
            style: 'currency',
            currency: 'BGN',
            minimumFractionDigits: 2
        }).format(amount);
    }

    showLoading(show) {
        const loading = document.getElementById('loading');
        const table = document.getElementById('transactions-table');
        
        if (show) {
            loading.classList.remove('hidden');
            table.classList.add('hidden');
        } else {
            loading.classList.add('hidden');
        }
    }

    async testConnection() {
        const statusDiv = document.getElementById('connection-status');
        statusDiv.innerHTML = '<span style="color: orange;">üîÑ –¢–µ—Å—Ç–≤–∞–º –≤—Ä—ä–∑–∫–∞—Ç–∞...</span>';
        
        try {
            const csvUrl = `https://docs.google.com/spreadsheets/d/${SHEET_CONFIG.SHEET_ID}/export?format=csv&gid=${SHEET_CONFIG.GID}`;
            console.log('–¢–µ—Å—Ç–æ–≤ URL:', csvUrl);
            
            const response = await fetch(csvUrl);
            
            if (response.ok) {
                const csvText = await response.text();
                console.log('–ü–æ–ª—É—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏:', csvText.substring(0, 200) + '...');
                
                const lines = csvText.split('\n').filter(line => line.trim());
                
                if (lines.length > 1) {
                    statusDiv.innerHTML = `<span style="color: green;">‚úÖ –í—Ä—ä–∑–∫–∞—Ç–∞ —Ä–∞–±–æ—Ç–∏! –ù–∞–º–µ—Ä–µ–Ω–∏ ${lines.length - 1} —Ä–µ–¥–∞ –¥–∞–Ω–Ω–∏.<br>–ü—ä—Ä–≤–∏ —Ä–µ–¥: "${lines[0]}"</span>`;
                } else {
                    statusDiv.innerHTML = `<span style="color: orange;">‚ö†Ô∏è –í—Ä—ä–∑–∫–∞—Ç–∞ —Ä–∞–±–æ—Ç–∏, –Ω–æ –Ω—è–º–∞ –¥–∞–Ω–Ω–∏ –∏–ª–∏ —Å–∞–º–æ –∑–∞–≥–ª–∞–≤–∏—è.</span>`;
                }
            } else {
                statusDiv.innerHTML = `<span style="color: red;">‚ùå –ì—Ä–µ—à–∫–∞: ${response.status}. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ä—Ç –µ –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—ä–ø–µ–Ω.</span>`;
            }
        } catch (error) {
            statusDiv.innerHTML = `<span style="color: red;">‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ: ${error.message}</span>`;
            console.error('–î–µ—Ç–∞–π–ª–Ω–∞ –≥—Ä–µ—à–∫–∞:', error);
        }
    }

    showError(message) {
        console.error(message);
        const statusDiv = document.getElementById('connection-status');
        if (statusDiv) {
            statusDiv.innerHTML = `<span style="color: red;">‚ùå ${message}</span>`;
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –∫–æ–≥–∞—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –µ –∑–∞—Ä–µ–¥–µ–Ω–∞
document.addEventListener('DOMContentLoaded', () => {
    new NurseryCashRegister();
});

// –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–º–µ –∫–ª–∞—Å–∞ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ (–∞–∫–æ –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = NurseryCashRegister;
}